


buildscript {
    ext.kotlin_version = "${kotlin_version}"
    repositories {
        mavenCentral()
    }
}
plugins {
    id "org.kravemir.gradle.sass" version "1.2.2"
}
version 'unspecified'

apply plugin: 'java'
apply plugin: "kotlin"

String MAIN_CLASS = 'bz.stewart.bracken.web.MainKt'
String projName = "easypoliticsweb" //${project.name}
String buildRootDir = "$buildDir"
String buildResources = "${buildRootDir}/resources"

configurations{
    uiJsSource
}

sass {
    main {
        srcDir = file("$projectDir/src/main/sass")
        outDir = file("$buildResources/main/static")
    }
}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
    compile 'com.sparkjava:spark-core:2.3'
    compile group: "org.jetbrains.kotlinx", name: "kotlinx-html-jvm", version: "0.6.4"
    testCompile group: 'junit', name: 'junit', version: '4.+'
    //compile project(":ui")
    uiJsSource project(path:":ui", configuration:"jsArtifact")
}

//task prepare(type: Copy) {
//    into "$buildDir/resources/main/static/lib"
//
//    // Use the artifacts from the other projects.
//    // Gradle knows that tasks that created the artifacts
//    // and will invoke them for us.
//
//    from {
//
//        tarTree(configurations.uiJsSource.resolvedConfiguration.resolvedArtifacts)
//    }
//}

task prepare {
    inputs.file configurations.uiJsSource//.resolvedConfiguration.resolvedArtifacts
    outputs.dir "$buildDir/resources/main/static/lib"
    doLast {
        configurations.uiJsSource.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            copy {
                from project.tarTree(artifact.getFile())
                into "$buildDir/resources/main/static/lib"
            }
        }
    }
    dependsOn ":ui:build"
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

mainSass{
    doFirst{
        println("Compiling Sass...")
    }
    doLast{
        println("Finished compiling Sass!")
    }
}

tasks.build.doLast {
    tasks.mainSass.execute()
}

task fatJar(type: Jar, dependsOn:build) {
    baseName = project.name + '-fat'
    from { configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
    manifest {
        attributes 'Main-Class': MAIN_CLASS
    }
}

task run(type:JavaExec,dependsOn:[fatJar,prepare]){
    main = MAIN_CLASS
    classpath = sourceSets.main.runtimeClasspath
}


//task copyUi(dependsOn:[build, mainSass, "ui:build"]) {
//
//    doFirst {
//        //println("COPYING resources from $resourcesDir into build directory $buildOutDir")
//    }
//    doLast {
//        copy {
//            project(':ui').configurations.
//            //from resourcesDir
//            into "${buildOutDir}"
//            //exclude { details -> details.isDirectory() }
//        }
//        //copy kotlin.js into lib folder
//        configurations.compile.each { File file ->
//            copy {
//                includeEmptyDirs = false
//                from zipTree(file.absolutePath)
//                into "${buildOutDir}/lib"
//                include { fileTreeElement ->
//                    def path = fileTreeElement.path
//                    path.endsWith(".js") && (path.startsWith("META-INF/resources/")
//                            || !path.startsWith("META-INF/"))
//                }
//            }
//        }
//        println("Copied kotlin.js from jar")
//        println("Finished copying resources into build folder...")
//    }
//}