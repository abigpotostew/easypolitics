plugins {
    id "org.kravemir.gradle.sass" version "1.2.2"
}

apply plugin: 'java'
apply plugin: "kotlin-platform-jvm"
apply plugin: 'com.moowork.node'
apply plugin: 'application'

String MAIN_CLASS = 'bz.stewart.bracken.web.MainKt'
String projName = "easypoliticsweb" //${project.name}
String buildRootDir = "$buildDir"
String buildResources = "${buildRootDir}/resources"

archivesBaseName = 'easypolitics-web'
mainClassName = MAIN_CLASS

configurations {
    uiJsSource
}

sass {
    main {
        srcDir = file("$projectDir/src/main/sass")
        outDir = file("$buildResources/main/static")
    }
}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    compile libraries.kotlin_stdlib
    compile 'com.sparkjava:spark-core:2.3'
    compile group: "org.jetbrains.kotlinx", name: "kotlinx-html-jvm", version: "0.6.4"
    compile group: "org.jetbrains.kotlinx", name: "kotlinx-html-jvm", version: "0.6.4", configuration: "sources"
    compile group: "org.jetbrains.kotlinx", name: "kotlinx-html-jvm", version: "0.6.4", configuration: "javadoc"
    testCompile libraries.junit
    testCompile libraries.mockito
    testCompile libraries.kotlin_test
    uiJsSource project(path: ":ui-app", configuration: "devJsArtifact")
    expectedBy project(":shared")
}

task prepare {
    inputs.file configurations.uiJsSource//.resolvedConfiguration.resolvedArtifacts
    outputs.dir "$buildDir/resources/main/static/lib"
    doLast {
        configurations.uiJsSource.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            copy {
                from project.zipTree(artifact.getFile())
                exclude "META-INF/"
                into "$buildDir/resources/main/static/lib"
            }
        }
    }
    dependsOn ":ui:build"
}

node {
    version = nodeVersion
    download = true
}


task installRequireJs(type: NpmTask) {
    inputs.property('requireJsVersion', requireJsVersion)
    outputs.dir file("node_modules/requirejs")

    args = ['install', "requirejs@${requireJsVersion}"]
}

task copyNodeLibraries(type: Copy, dependsOn: installRequireJs) {
    from "node_modules/requirejs/require.js"
    into "${buildDir}/resources/main/static/lib"
}
prepare.dependsOn copyNodeLibraries

mainSass {
    doFirst {
        println("Compiling Sass...")
    }
    doLast {
        println("Finished compiling Sass!")
    }
}

tasks.build.doLast {
    tasks.mainSass.execute()
}

task fatJar(type: Jar, dependsOn: build) {
    baseName = project.name + '-fat'
    from { configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
    manifest {
        attributes 'Main-Class': MAIN_CLASS
    }
}

task runWeb(type: JavaExec, dependsOn: [classes, fatJar, prepare]) {
    main = MAIN_CLASS
    classpath = sourceSets.main.runtimeClasspath
    ignoreExitValue(true)
    jvmArgs = ['-Dbz.stewart.bracken.web.port=4567']

    if (project && project.hasProperty("appArgs")) {
        args Eval.me(appArgs)
    }
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.kotlin
}

artifacts {
    archives sourcesJar
}

// Application stuff
//todo this should pull in from build environment and bundle into the distribution
applicationDefaultJvmArgs=["-Dbz.stewart.bracken.web.port=4567"]
