String buildOutDir = "build"
String sharedSrc = "../shared/src/main/kotlin"
String genTargetDir = "$buildOutDir/gen"
final String MAIN_CLASS = "bz.stewart.bracken.rest.Main"

//resourcesStagingDir = new File("$buildDir/resources")

buildscript {
	ext {
		//restKotlinVersion = "$kotlin_version"//"1.1.3-2" //normally using "$kotlin_version" but >1.1.3 breaks spring boot web
		//spring_boot_version = '1.5.4.RELEASE'
	}
	repositories {
		jcenter()
	}
	dependencies {
		//classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version" // See https://kotlinlang.org/docs/reference/compiler-plugins.html#kotlin-spring-compiler-plugin
		//classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_version"
	}
}

apply plugin: 'java'
apply plugin: "kotlin-platform-jvm"

archivesBaseName = 'easypolitics-rest'

jar {
	baseName = 'easypolitics-rest'
	//version = '0.0.2'
}

sourceCompatibility = 1.8



//repositories {
//	mavenCentral()
//	//maven{ url 'http://repository.jetbrains.com/kotlin-nosql' }
//}


dependencies {
//    compile("org.springframework.boot:spring-boot-starter-web"){
//	}
//	compile("org.springframework.boot:spring-boot-starter-data-rest"){
//		exclude group: 'org.slf4j', module: 'jcl-over-slf4j'
//	}
//	compile("org.springframework.boot:spring-boot-starter-data-mongodb"){
//		exclude group: 'org.slf4j', module: 'jcl-over-slf4j'
//	}
	compile 'com.sparkjava:spark-core:2.7.+'
	compile libraries.kotlin_stdlib
	compile libraries.kotlin_reflect
	compile (project(':db')){
        //exclude module: 'log4j-over-slf4j'
        exclude module: 'log4j-over-slf4j'
        exclude module: 'jcl-over-slf4j'
        exclude module: 'jcl-to-slf4j'
		exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    }
	compile 'org.litote.kmongo:kmongo:3.5.+'

	testCompile project(':db').sourceSets.test.output

	expectedBy project(":shared")

    runtime (project(':db')){
		exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    }

	//runtime startdb

	//compile project(':shared')
}

task bootJar(type: Jar, dependsOn: build) {
    baseName = project.name + '-fat'
    from { configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
    manifest {
        attributes 'Main-Class': MAIN_CLASS
    }
}

task bootRun(type: JavaExec, dependsOn: [classes, bootJar]) {
    main = MAIN_CLASS
    classpath = sourceSets.main.runtimeClasspath
    ignoreExitValue(true)
    jvmArgs = ['-Xdebug', '-Xrunjdwp:server=y,transport=dt_socket,address=5005,suspend=n', '-Dbz.stewart.bracken.rest.port=8080','-Dbz.stewart.bracken.rest.database.name=congress2']

    if (project && project.hasProperty("appArgs")) {
        args Eval.me(appArgs)
    }
}

//task copyConfStagingFiles(type: Copy) {
//	from _wherever your files reside_
//	into confDir
//	include('**/*.properties') // your configuration files
//}

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.kotlin
}

artifacts {
	archives sourcesJar
}