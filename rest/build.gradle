String buildOutDir = "build"
String sharedSrc = "../shared/src/main/kotlin"
String genTargetDir = "$buildOutDir/gen"


buildscript {
	ext {
		//kotlinVersion = "1.1.2"
		spring_boot_version = '1.5.4.RELEASE'
	}
	repositories {
		jcenter()
	}
	dependencies {
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version" // Required for Kotlin integration
		classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version" // See https://kotlinlang.org/docs/reference/compiler-plugins.html#kotlin-spring-compiler-plugin
		classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_version"
	}
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
//apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'

jar {
	baseName = 'easypolitics-rest'
	version = '0.0.2'
}

sourceCompatibility = 1.8

sourceSets {
    main.kotlin.srcDirs += 'src/main/kotlin'
	test.kotlin.srcDirs += 'src/test/kotlin'
}


//repositories {
//	mavenCentral()
//	//maven{ url 'http://repository.jetbrains.com/kotlin-nosql' }
//}


dependencies {
    compile("org.springframework.boot:spring-boot-starter-web"){
		//exclude group: 'ch.qos.logback', module: 'logback-classic'
		//exclude group: 'org.slf4j', module:'jcl-over-slf4j'
	}
	compile("org.springframework.boot:spring-boot-starter-data-rest"){
		exclude group: 'org.slf4j', module: 'jcl-over-slf4j'
	}
	compile("org.springframework.boot:spring-boot-starter-data-mongodb"){
		exclude group: 'org.slf4j', module: 'jcl-over-slf4j'
	}
	//compile('org.springframework.boot:spring-boot-starter')
	//compile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
	compile("org.jetbrains.kotlin:kotlin-stdlib:${kotlin_version}")
	compile("org.jetbrains.kotlin:kotlin-reflect:${kotlin_version}")
	//compile("org.jetbrains.kotlin:kotlin-nosql-mongodb:0.1-SNAPSHOT")
	compile (project(':db')){
        //exclude module: 'log4j-over-slf4j'
        exclude module: 'log4j-over-slf4j'
        exclude module: 'jcl-over-slf4j'
        exclude module: 'jcl-to-slf4j'
		exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    }
	compile 'org.litote.kmongo:kmongo:3.3.5'


	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile project(':db').sourceSets.test.output


    runtime (project(':db')){
//        exclude module: 'log4j-over-slf4j'
//        exclude module: 'jcl-over-slf4j'
//        exclude module: 'jcl-to-slf4j'
		exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    }

	//runtime startdb

	//compile project(':shared')
}

task copySharedCode(type: Copy){
	doFirst{
		println("Copying shared code into $genTargetDir")
	}
	from sharedSrc
	into genTargetDir
	eachFile { println ("Copying: ${it.file}" )}
	doLast{
		println("finished copying '$sharedSrc' into '$genTargetDir'.")
	}
}


assemble {
	dependsOn copySharedCode
}

//run {
//	//dependsOn projects.db.startdb
//}
//test {
//}

bootRun{
	//dependsOn projects.db.startdb
   //debug = true
	//run {
		jvmArgs = ['-Xdebug', '-Xrunjdwp:server=y,transport=dt_socket,address=5005,suspend=n', '-Dbz.stewart.bracken.db.name=congress2']//, '-Dbz.stewart.bracken.db.collection=bills'
	//}
}

test{
	//dependsOn projects.db.startdb
	//jvmArgs = ['-Xdebug', '-Xrunjdwp:server=y,transport=dt_socket,address=5005,suspend=y']
}


task bootRunDebug(){
	doFirst{
		boolean priorDebugVal = tasks.bootRun.debug
		tasks.bootRun.debug = true
		try{
			tasks.bootRun.execute()
		}finally{
			tasks.run.debug = priorDebugVal
		}
	}
}

springBoot {
	mainClass = "bz.stewart.bracken.rest.EasypoliticsRestApplication"
}