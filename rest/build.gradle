String buildOutDir = "build"
String sharedSrc = "../shared/src/main/kotlin"
String genTargetDir = "$buildOutDir/gen"
final String MAIN_CLASS = "bz.stewart.bracken.rest.Main"


////////////////////////////////////////////////////////////////////////
//Read in my.properties, use props.getProperty("propName")
def props = new Properties()
file("../my.properties").withInputStream { props.load(it) }

////////////////////////////////////////////////////////////////////////
//  LOAD IN SOME MY PROPS
String DBNAME = props.getProperty("DBNAME")


// Do the rest
buildscript {
    ext{}
	repositories {
		jcenter()
	}
}

apply plugin: "kotlin-platform-jvm"
apply plugin: 'java'

archivesBaseName = 'easypolitics-rest'

jar {
	baseName = 'easypolitics-rest'
	//version = '0.0.2'
}

sourceCompatibility = 1.8

dependencies {
	compile 'com.sparkjava:spark-core:2.7.+'
	compile libraries.kotlin_stdlib
	compile libraries.kotlin_reflect
	compile (project(':db')){
        exclude module: 'log4j-over-slf4j'
        exclude module: 'jcl-over-slf4j'
        exclude module: 'jcl-to-slf4j'
		exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    }
	compile 'org.litote.kmongo:kmongo:3.5.+'

	testCompile project(':db').sourceSets.test.output

    compile project(":shared") //huh, choose!?
	expectedBy project(":shared")

    runtime (project(':db')){
		exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    }
}

task bootJar(type: Jar, dependsOn: build) {
    baseName = project.name + '-fat'
    from { configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
    manifest {
        attributes 'Main-Class': MAIN_CLASS
    }
}

task bootRun(type: JavaExec, dependsOn: [classes, bootJar]) {
    main = MAIN_CLASS
    classpath = sourceSets.main.runtimeClasspath
    ignoreExitValue(true)
    jvmArgs = ['-Xdebug', '-Xrunjdwp:server=y,transport=dt_socket,address=5005,suspend=n', '-Dbz.stewart.bracken.rest.port=8080', "-Dbz.stewart.bracken.rest.database.name=${DBNAME}"]

    if (project && project.hasProperty("appArgs")) {
        args Eval.me(appArgs)
    }
}

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.kotlin
}

artifacts {
	archives sourcesJar
}