

///////////////////////////////////////////////////////////////////////////
// PLUGINS
///////////////////////////////////////////////////////////////////////////

plugins {
    id "org.kravemir.gradle.sass" version "1.2.2"
   // id "com.eriwen.gradle.js" version "2.14.1" //combine js files
}
apply plugin: 'kotlin-platform-js'
//apply plugin: "com.eriwen.gradle.js" //combine js files


///////////////////////////////////////////////////////////////////////////
// BUILD LOCATIONS
///////////////////////////////////////////////////////////////////////////
version '1.0-SNAPSHOT'
String projName = "easypolitics-ui" //${project.name}
String buildRootDir = "${projectDir}/build"
String buildOutDir = "${buildRootDir}/${projName}"

String sharedSrc = "../shared/src/main/kotlin"
String genTargetDir = "$buildOutDir/gen"

String resourcesDir = "src/main/resources"

archivesBaseName = 'easypolitics-ui'

configurations {
    ktlint
}
///////////////////////////////////////////////////////////////////////////
// BUILD LOGIC
///////////////////////////////////////////////////////////////////////////

sass {
    main {
        srcDir = file("$projectDir/src/main/sass")
        outDir = file("$buildOutDir")
    }
}

repositories {
    mavenCentral()
    jcenter()
}
compileKotlin2Js {
    //kotlinOptions.metaInfo = true
    kotlinOptions.outputFile = "${buildOutDir}/${projName}.js"

    kotlinOptions.sourceMap = true
    kotlinOptions.sourceMapEmbedSources = "always"
    //kotlinOptions.suppressWarnings = false
    kotlinOptions.verbose = true

    //kotlin.incremental=true //only re-build changed files
}

[compileKotlin2Js, compileTestKotlin2Js]*.configure {
    kotlinOptions.moduleKind = "umd"
}

dependencies {
    def kotlinx_html_version = "0.6.4"

    ktlint 'com.github.shyiko:ktlint:0.8.1'
    compile libraries.kotlin_stdlib_js
    testCompile libraries.kotlin_test_js
    compile "org.jetbrains.kotlinx:kotlinx-html-js:${kotlinx_html_version}"
    compile "org.jetbrains.kotlinx:kotlinx-html-js:${kotlinx_html_version}:sources"
    expectedBy project(":shared")
}


task copyJsResources(type:Copy) {
    doFirst {
        logger.info("COPYING UI resources from $resourcesDir into build directory $buildOutDir")
    }
    from resourcesDir
    into "${buildOutDir}"
    doLast {
        logger.info("Finished copying UI resources into build folder...")
    }
    dependsOn mainSass
}
//assemble.dependsOn.add(copyJsResources)

//task assembleWeb(type: Copy) {
//    configurations.compile.each { File file ->
//        from(zipTree(file.absolutePath), {
//            includeEmptyDirs = false
//            include { fileTreeElement ->
//                def path = fileTreeElement.path
//                path.endsWith(".js") && (path.startsWith("META-INF/resources/") ||
//                        !path.startsWith("META-INF/"))
//            }
//        })
//    }
//    from compileKotlin2Js.destinationDir
//    into "${buildOutDir}/lib"
//
//    dependsOn classes
//
//
//    //dependsOn tasks.copySharedCode
//
//    doLast{
//        logger.info("Copied kotlin.js from jar")
//    }
//}

//compileKotlin2Js.dependsOn copySharedCode
assemble {
    //dependsOn copyJsResources

}
//assemble.dependsOn.add(assembleWeb)

//classes.dependsOn copySharedCode
//tasks.classes.dependsOn(copySharedCode)

mainSass{
    doFirst{
        logger.info("Compiling UI Sass...")
    }
    doLast{
        logger.info("Finished compiling UI Sass!")
    }
}

tasks.build.doLast() {
    tasks.copyJsResources.execute()
    tasks.mainSass.execute()

    logger.info("Finished UI build!")
}

task cleaner(type: Delete) {
    doLast{
        [buildRootDir, "out"].each({ String s->
            logger.info("Deleting: ${s}")
            delete s
        })
        followSymlinks = true
    }
}
tasks.clean.doLast{
    tasks.cleaner.execute()
}


task ktlint(type: JavaExec) {
    main = "com.github.shyiko.ktlint.Main"
    classpath = configurations.ktlint
    args "src/**/*.kt"
}
//check.dependsOn ktlint

task ktlintFormat(type: JavaExec) {
    main = "com.github.shyiko.ktlint.Main"
    classpath = configurations.ktlint
    args "-F", "src/**/*.kt"
}

task webArtifact(type:Tar){
    //inputs.file copyJsResources
    compression 'gzip'
    from "build/$projName"
    //into "bui/bundle"
    exclude "$buildDir/bundle"
    exclude "gen"
    //outputs.dir "$buildDir/bundle"
    //dependsOn "$buildDir"
}

///////////////////////////////////////////////////////////////////////////
// Configurations
///////////////////////////////////////////////////////////////////////////


//javascript.source {
//    dev {
//        js {
//            srcDir "$buildDir"
//            include "*.js"
//            exclude "*.meta.js"
//        }
//    }
////    prod {
////        js {
////            srcDir buildDir
////            include "*.min.js"
////            exclude "*.meta.js"
////        }
////    }
//}
//
//combineJs {
////    dependencies{
////        compile
////    }
//    encoding = "UTF-8"
//    source = javascript.source.dev.js.files
//    dest = file("${buildDir}/${projName}-all.js")
//}
//combineJs.dependsOn build
////// Create new CombineJsTasks if you have multiple sets of JS files
////task jsDev(type: com.eriwen.gradle.js.tasks.CombineJsTask) {
////    source = ["${projectDir}/js/file1.js", "${projectDir}/js/file2.js"]
////    dest = file("${buildDir}/all-debug.js")
////}
////
////task jsProd(type: com.eriwen.gradle.js.tasks.CombineJsTask) {
////    source = ["${projectDir}/js/file1.js", "${projectDir}/js/file2.js"]
////    dest = file("${buildDir}/all.js")
////}

configurations {
    // New configuration to associate
    // dist task output with.
    jsArtifact
}

artifacts {
    // Declare output of dist task
    // as artifact for the jsArtifact
    // configuration.
    jsArtifact webArtifact
}