///////////////////////////////////////////////////////////////////////////
// PLUGINS
///////////////////////////////////////////////////////////////////////////

plugins {
    id "org.kravemir.gradle.sass" version "1.2.2"
}
apply plugin: 'kotlin-platform-js'
apply plugin: 'com.moowork.node'

///////////////////////////////////////////////////////////////////////////
// BUILD LOCATIONS
///////////////////////////////////////////////////////////////////////////
version '1.0-SNAPSHOT'
String projName = "easypolitics-ui" //${project.name}
String buildRootDir = "${buildDir}"//"${projectDir}/build"
String buildOutDir = "${buildRootDir}/${projName}"

String resourcesDir = "src/main/resources"

archivesBaseName = 'easypolitics-ui'

configurations {
    ktlint
}
///////////////////////////////////////////////////////////////////////////
// BUILD LOGIC
///////////////////////////////////////////////////////////////////////////

sass {
    main {
        srcDir = file("$projectDir/src/main/sass")
        outDir = file("${buildDir}/resources/main/style")
    }
}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    ktlint 'com.github.shyiko:ktlint:0.8.1'

    def kotlinx_html_version = "0.6.4"
    compile libraries.kotlin_stdlib_js
    compile "org.jetbrains.kotlinx:kotlinx-html-js:${kotlinx_html_version}"
    compile "org.jetbrains.kotlinx:kotlinx-html-js:${kotlinx_html_version}:sources"
    expectedBy project(":shared")

    testCompile libraries.kotlin_test_js
}

compileKotlin2Js {
    kotlinOptions.sourceMap = true
    kotlinOptions.sourceMapEmbedSources = "always"
    kotlinOptions.verbose = true
    //kotlin.incremental=true //only re-build changed files
}

[compileKotlin2Js, compileTestKotlin2Js]*.configure {
    kotlinOptions.moduleKind = "umd"
}

node {
    version = nodeVersion
    download = true
}

task installJquery(type: NpmTask) {
    inputs.property('jqueryVersion', jqueryVersion)
    outputs.dir file('node_modules/jquery')

    args = ['install', "jquery@${jqueryVersion}"]
}

task installJqueryActual(type: NpmTask) {
    inputs.property('jqueryActualVersion', jqueryActualVersion)
    outputs.dir file('node_modules/jquery.actual')

    args = ['install', "jquery.actual@${jqueryActualVersion}"]
}

task installBootstrapBeta(type:NpmTask) {
    inputs.property('bootstrapBetaVersion', bootstrapBetaVersion)
    outputs.dir file('node_modules/bootstrap-beta')

    args = ['install', "bootstrap-beta@${bootstrapBetaVersion}"]
}


task populateNodeModules(type: Copy, dependsOn: [compileKotlin2Js, installJquery, installJqueryActual, installBootstrapBeta]) {
    from compileKotlin2Js.destinationDir

    configurations.compile.each {
        from zipTree(it.absolutePath).matching { include '*.js' }
    }

    into "${buildDir}/node_modules"
}

//copies dev versions
task copyNodeLibraries(type: Copy, dependsOn: populateNodeModules) {
    from "node_modules/bootstrap-beta/dist/js/bootstrap-bundle.js"
    from "node_modules/jquery.actual/jquery.actual.js"
    from "node_modules/jquery/dist/jquery.js"
    into "${buildDir}/resources/main/lib"
}
assemble.dependsOn copyNodeLibraries



assemble {

}

mainSass {
    doFirst {
        logger.info("Compiling UI Sass...")
    }
    doLast {
        logger.info("Finished compiling UI Sass!")
    }
}

build.dependsOn mainSass

task cleaner(type: Delete) {
    doLast {
        [buildRootDir, "out"].each({ String s ->
            logger.info("Deleting: ${s}")
            delete s
        })
        followSymlinks = true
    }
}
tasks.clean.doLast {
    tasks.cleaner.execute()
}


task ktlint(type: JavaExec) {
    main = "com.github.shyiko.ktlint.Main"
    classpath = configurations.ktlint
    args "src/**/*.kt"
}

task ktlintFormat(type: JavaExec) {
    main = "com.github.shyiko.ktlint.Main"
    classpath = configurations.ktlint
    args "-F", "src/**/*.kt"
}

task webArtifact(type: Tar) {
    compression 'gzip'
    from "build/$projName"
    exclude "$buildDir/bundle"
    exclude "gen"
}

///////////////////////////////////////////////////////////////////////////
// Configurations
///////////////////////////////////////////////////////////////////////////
configurations {
    // New configuration to associate
    // dist task output with.
    jsArtifact
}

artifacts {
    // Declare output of dist task
    // as artifact for the jsArtifact
    // configuration.
    jsArtifact webArtifact
}