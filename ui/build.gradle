//group 'bz.stewart.bracken'


buildscript {
    ext.kotlin_version = project.kotlin_version
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlin_version}"
    }
}

///////////////////////////////////////////////////////////////////////////
// PLUGINS
///////////////////////////////////////////////////////////////////////////

plugins {
    id "org.kravemir.gradle.sass" version "1.2.2"
}
apply plugin: 'kotlin2js'


///////////////////////////////////////////////////////////////////////////
// BUILD LOCATIONS
///////////////////////////////////////////////////////////////////////////
version '1.0-SNAPSHOT'
String projName = "easypolitics-ui" //${project.name}
String confidence = "internal"
String buildRootDir = "${projectDir}/build"
String buildOutDir = "${buildRootDir}/${confidence}/${projName}"

String sharedSrc = "../shared/src/main/kotlin"
String genTargetDir = "$buildOutDir/gen"

String resourcesDir = "src/main/resources"


configurations {
    ktlint
}
///////////////////////////////////////////////////////////////////////////
// BUILD LOGIC
///////////////////////////////////////////////////////////////////////////
sass {
    main {
        srcDir = file("$projectDir/src/main/sass")
        outDir = file("$buildOutDir")
    }
}

repositories {
    mavenCentral()
}
compileKotlin2Js {
    kotlinOptions.metaInfo = true
    kotlinOptions.outputFile = "${buildOutDir}/${projName}.js"
    kotlinOptions.sourceMap = false
    //kotlinOptions.suppressWarnings = false
    kotlinOptions.verbose = true

    kotlinOptions.moduleKind = "umd"
    //kotlin.incremental=true //only re-build changed files
}

sourceSets {
    main.kotlin.srcDirs += 'src/main/kotlin'
    main.kotlin.srcDirs += genTargetDir
}

dependencies {
    ktlint 'com.github.shyiko:ktlint:0.8.1'
    compile "org.jetbrains.kotlin:kotlin-stdlib-js:${project.kotlin_stdlib_js_version}"
}


task copyJsResources(dependsOn:[build, mainSass]) {

    doFirst {
        println("COPYING resources from $resourcesDir into build directory $buildOutDir")
    }
    doLast {
        copy {
            from resourcesDir
            into "${buildOutDir}"
            exclude { details -> details.isDirectory() }
        }
        //copy kotlin.js into lib folder
        configurations.compile.each { File file ->
            copy {
                includeEmptyDirs = false
                from zipTree(file.absolutePath)
                into "${buildOutDir}/lib"
                include { fileTreeElement ->
                    def path = fileTreeElement.path
                    path.endsWith(".js") && (path.startsWith("META-INF/resources/")
                            || !path.startsWith("META-INF/"))
                }
            }
        }
        println("Copied kotlin.js from jar")
        println("Finished copying resources into build folder...")
    }
}

mainSass{
    doFirst{
        println("Compiling Sass...")
    }
    doLast{
        println("Finished compiling Sass!")
    }
}

tasks.build.doLast() {
    tasks.copyJsResources.execute()
    tasks.mainSass.execute()

    println("Finished build!")
}

task cleaner(type: Delete) {
    doLast{
        [buildRootDir, "out"].each({ String s->
            println("Deleting: ${s}")
            delete s
        })
        followSymlinks = true
    }
}
tasks.clean.doLast{
    tasks.cleaner.execute()
}

task copySharedCode(type: Copy){
    doFirst{
        println("Copying shared code into $genTargetDir...")
    }
    from sharedSrc
    into genTargetDir
    doLast{
        println("Finished copying '$sharedSrc' into '$genTargetDir'.")
    }
}

assemble {
    dependsOn copySharedCode
}


task ktlint(type: JavaExec) {
    main = "com.github.shyiko.ktlint.Main"
    classpath = configurations.ktlint
    args "src/**/*.kt"
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec) {
    main = "com.github.shyiko.ktlint.Main"
    classpath = configurations.ktlint
    args "-F", "src/**/*.kt"
}