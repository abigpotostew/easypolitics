import com.wiredforcode.gradle.spawn.*

String projectDir = file(".")
String baseBuildDir = file("build")
String testMainDir = file("src/test")

String mainResourcesRel = "main"
String testResourcesRel = "test"

String sharedSrc = "../shared/src/main/kotlin"

String resourcesDir = "src/main/resources"

String MAIN_CLASS = 'bz.stewart.bracken.db.MainKt'

////////////////////////////////////////////////////////////////////////
//Read in my.properties, use props.getProperty("propName")
def props = new Properties()
file("../my.properties").withInputStream { props.load(it) }

////////////////////////////////////////////////////////////////////////
//  LOAD IN SOME MY PROPS
String DB_PATH = props.getProperty("DB_PATH")


////////////////////////////////////////////////////////////////////////
// rest of gradle build

buildscript {

    repositories {
        mavenCentral()
        maven { url 'http://dl.bintray.com/vermeulen-mp/gradle-plugins' }
    }

    dependencies {
        classpath 'com.wiredforcode:gradle-spawn-plugin:0.6.0'
    }
}


apply plugin: "kotlin-platform-jvm"
apply plugin: 'com.wiredforcode.spawn'


archivesBaseName = 'easypolitics-db'

repositories {

    maven{url 'https://dl.bintray.com/xenomachina/maven'}
}

dependencies {
    compile libraries.kotlin_stdlib
    compile "org.litote.kmongo:kmongo:3.3.5"
    compile 'io.github.microutils:kotlin-logging:1.4.3'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.22' //required at compile time
    compile "com.xenomachina:kotlin-argparser:2.0.0"

    testCompile libraries.junit
    testCompile libraries.mockito
    testCompile libraries.kotlin_test

    runtime "org.slf4j:slf4j-log4j12:1.7.24" //todo figure out how to exclude this from rest

    expectedBy project(":shared")
}

task startdb(type: SpawnProcessTask, dependsOn: 'assemble'){

    command "mongod --dbpath ${DB_PATH}"
    ready 'waiting for connections on port'

}
task stopdb(type: KillProcessTask)

task copyMainResources(dependsOn:build){

    doFirst{
        println("COPYING resources into build folder...")
    }

    dependencies{
        build
    }
    doLast {
        copy {
            from resourcesDir
            into "${baseBuildDir}"
            exclude {details -> details.isDirectory()}

            eachFile { println ("Copying resource for build: ${it.file}" )}
        }
        println("Finished copying resources into build folder...")
    }
}

task run(dependsOn: classes, type: JavaExec) {
    main = "$MAIN_CLASS"
    classpath = sourceSets.main.runtimeClasspath
    ignoreExitValue(true)
    if ( project && project.hasProperty("appArgs") ) {
        args Eval.me(appArgs)
    }
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.kotlin
}

artifacts {
    archives sourcesJar
}