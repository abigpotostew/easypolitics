String projectDir = file(".")
String baseBuildDir = file("build")
String testMainDir = file("src/test")

String mainResourcesRel = "main"
String testResourcesRel = "test"

//String sharedSrc = "../shared/src/main/kotlin"
//String genTargetDir = "build/gen"
//String genTargetDir = baseBuildDir + 'gen'

String resourcesDir = "src/main/resources"

String MAIN_CLASS = 'bz.stewart.bracken.legislators.MainKt'

//

buildscript {
    ext.kotlin_version = '1.1.2'
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.wiredforcode:gradle-spawn-plugin:0.6.0'
    }
}

apply plugin: "kotlin"
apply plugin: 'com.wiredforcode.spawn'
apply plugin: 'application'

repositories{
    maven{url 'https://dl.bintray.com/xenomachina/maven'}
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib"
    compile "com.xenomachina:kotlin-argparser:2.0.0"
    compile "org.litote.kmongo:kmongo:3.3.5"
    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.8.1'
    compile 'io.github.microutils:kotlin-logging:1.4.3'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.24' //required at compile time
    //runtime "org.slf4j:slf4j-simple:1.7.24"
    runtime "org.slf4j:slf4j-log4j12:1.7.24"
    //runtime "org.slf4j:slf4j:1.7.24"
}



sourceSets {
    main.kotlin.srcDirs += 'src/main/kotlin'
    main.kotlin.srcDirs += 'build/gen'
    //main.kotlin.srcDirs += '../shared/src/main'
    test.kotlin.srcDirs += 'src/test/kotlin'

    //main.java.srcDirs += 'src/main/myJava'
}

kotlin {
    experimental {
        coroutines 'enable'
    }

}

compileKotlin {
    kotlinOptions.suppressWarnings = true
}


//task startdb(type: SpawnProcessTask, dependsOn: 'assemble'){
//
//    command "mongod --dbpath /Users/stew/Documents/db/congress1"
//    ready 'waiting for connections on port'
//
//}
//task stopdb(type: KillProcessTask)

//task copyMainResources(dependsOn:build){
//
//    doFirst{
//        println("COPYING resources into build folder...")
//    }
//
//    dependencies{
//        build
//        //runtime files('resources')//, 'resources/index.html')
//    }
//    doLast {
//        copy {
//            from resourcesDir
//            into "${baseBuildDir}"
//            exclude {details -> details.isDirectory()}
//            //include['*.html', '*.js', '*.css']
//            /*exclude { details ->
//                details.file.name.endsWith('.html') &&
//                        details.file.text.contains('staging')
//            }*/
//            eachFile { println ("Copying resource for build: ${it.file}" )}
//        }
//
//
//        println("Finished copying resources into build folder...")
//    }
//
//
//}


//-------------------------------------------------
// Build and Runtime Tasks
//-------------------------------------------------
test{
    systemProperty "test.resources", "$baseBuildDir/resources/test"
    //systemProperty "test.resources", project.getProperty("test.resources") // can use gw test -Ptest.resources=sdfasd
}

//jar {
//    manifest {
//        Attributes 'Main-Class': "$MAIN_CLASS"
//    }
//    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
//}
run {
    mainClassName = "$MAIN_CLASS"
    //systemProperty "-data", project.getProperty("data") // can use gw test -Ptest.resources=sdfasd
    if ( project && project.hasProperty("appArgs") ) {
        args Eval.me(appArgs)
    }

}

task debugRun(dependsOn:build){
    doFirst{
        tasks.run.debug = true
        try{
            tasks.run.execute()
        }finally{
            tasks.run.debug = false
        }
    }
}
//
//task copySharedCode(type: Copy){
//    doFirst{
//        println("Copying shared code into $genTargetDir")
//    }
//    from sharedSrc
//    into genTargetDir
//    eachFile { println ("Copying: ${it.file}" )}
//    doLast{
//        println("finished copying '$sharedSrc' into '$genTargetDir'.")
//    }
//}
//
//
//assemble {
//    dependsOn copySharedCode
//}
